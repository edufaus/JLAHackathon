const cache = new WeakMap();
export function isInView(el) {
    const rect = el.getBoundingClientRect();
    if (!window.visualViewport)
        return false;
    return (rect.top >= 0 &&
        rect.left >= 0 &&
        // Need + 40 for safari detection
        rect.bottom <= window.visualViewport.height - 40 &&
        rect.right <= window.visualViewport.width);
}
export function set(el, styles, ignoreCache = false) {
    // console.log(`setting style on node`, el, JSON.stringify(styles, null, 2));
    if (!el || !(el instanceof HTMLElement))
        return;
    const originalStyles = {};
    Object.entries(styles).forEach(([key, value]) => {
        if (key.startsWith("--")) {
            el.style.setProperty(key, value);
            return;
        }
        // eslint-disable-next-line ts/no-explicit-any
        originalStyles[key] = el.style[key];
        // eslint-disable-next-line ts/no-explicit-any
        el.style[key] = value;
    });
    if (ignoreCache)
        return;
    cache.set(el, originalStyles);
}
export function reset(el, prop) {
    if (!el || !(el instanceof HTMLElement))
        return;
    const originalStyles = cache.get(el);
    if (!originalStyles) {
        return;
    }
    if (prop) {
        // eslint-disable-next-line ts/no-explicit-any
        el.style[prop] = originalStyles[prop];
    }
    else {
        Object.entries(originalStyles).forEach(([key, value]) => {
            // eslint-disable-next-line ts/no-explicit-any
            el.style[key] = value;
        });
    }
}
function isMac() {
    return testPlatform(/^Mac/);
}
function testPlatform(re) {
    return typeof window !== "undefined" && window.navigator != null
        ? re.test(window.navigator.platform)
        : undefined;
}
function isIPhone() {
    return testPlatform(/^iPhone/);
}
export function isSafari() {
    return /^(?:(?!chrome|android).)*safari/i.test(navigator.userAgent);
}
function isIPad() {
    return (testPlatform(/^iPad/) ||
        // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.
        (isMac() && navigator.maxTouchPoints > 1));
}
export function isIOS() {
    return isIPhone() || isIPad();
}
export function isVertical(direction) {
    switch (direction) {
        case "top":
        case "bottom":
            return true;
        case "left":
        case "right":
            return false;
        default:
            return direction;
    }
}
export function getTranslate(element, direction) {
    if (!element) {
        return null;
    }
    const style = window.getComputedStyle(element);
    const transform = 
    // @ts-expect-error - vendor prefix
    style.transform || style.webkitTransform || style.mozTransform;
    let mat = transform.match(/^matrix3d\((.+)\)$/);
    if (mat) {
        // https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d
        return Number.parseFloat(mat[1].split(", ")[isVertical(direction) ? 13 : 12]);
    }
    // https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix
    mat = transform.match(/^matrix\((.+)\)$/);
    return mat ? Number.parseFloat(mat[1].split(", ")[isVertical(direction) ? 5 : 4]) : null;
}
export function dampenValue(v) {
    return 8 * (Math.log(v + 1) - 2);
}
export function assignStyle(element, style) {
    if (!element)
        return () => { };
    const prevStyle = element.style.cssText;
    Object.assign(element.style, style);
    return () => {
        element.style.cssText = prevStyle;
    };
}
/**
 * Receives functions as arguments and returns a new function that calls all.
 */
export function chain(...fns) {
    return (...args) => {
        for (const fn of fns) {
            if (typeof fn === "function") {
                fn(...args);
            }
        }
    };
}
