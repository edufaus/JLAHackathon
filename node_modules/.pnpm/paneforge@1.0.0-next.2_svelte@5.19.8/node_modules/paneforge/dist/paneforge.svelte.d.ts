import { type ReadableBoxedValues, type WithRefProps } from "svelte-toolbelt";
import type { Direction, DragState, PaneData, PaneOnCollapse, PaneOnExpand, PaneOnResize, PaneResizeHandleOnDragging, ResizeEvent, ResizeHandler } from "./internal/types.js";
import { type PaneGroupStorage } from "./internal/utils/storage.js";
type PaneGroupStateProps = WithRefProps<ReadableBoxedValues<{
    autoSaveId: string | null;
    direction: Direction;
    keyboardResizeBy: number | null;
    onLayout: (layout: number[]) => void | null;
    storage: PaneGroupStorage;
}>>;
export declare const defaultStorage: PaneGroupStorage;
declare class PaneGroupState {
    #private;
    id: PaneGroupStateProps["id"];
    direction: PaneGroupStateProps["direction"];
    dragState: DragState | null;
    layout: number[];
    paneDataArray: PaneData[];
    paneDataArrayChanged: boolean;
    paneIdToLastNotifiedSizeMap: Record<string, number>;
    paneSizeBeforeCollapseMap: Map<string, number>;
    prevDelta: number;
    constructor(props: PaneGroupStateProps);
    setLayout: (newLayout: number[]) => void;
    registerResizeHandle: (dragHandleId: string) => (e: ResizeEvent) => void;
    resizePane: (paneData: PaneData, unsafePaneSize: number) => void;
    startDragging: (dragHandleId: string, e: ResizeEvent) => void;
    stopDragging: () => void;
    unregisterPane: (paneData: PaneData) => void;
    isPaneCollapsed: (paneData: PaneData) => boolean;
    expandPane: (paneData: PaneData) => void;
    collapsePane: (paneData: PaneData) => void;
    getPaneSize: (paneData: PaneData) => number;
    getPaneStyle: (paneData: PaneData, defaultSize: number | undefined) => Record<string, unknown>;
    isPaneExpanded: (paneData: PaneData) => boolean;
    registerPane: (paneData: PaneData) => void;
    props: {
        id: string;
        "data-pane-group": string;
        "data-direction": Direction;
        "data-pane-group-id": string;
        style: {
            display: string;
            flexDirection: string;
            height: string;
            overflow: string;
            width: string;
        };
    };
    createResizer: (props: PaneResizerStateProps) => PaneResizerState;
    createPane: (props: PaneStateProps) => PaneState;
}
type PaneResizerStateProps = WithRefProps<ReadableBoxedValues<{
    onDraggingChange: PaneResizeHandleOnDragging;
    disabled: boolean;
    tabIndex: number;
}>>;
declare class PaneResizerState {
    #private;
    resizeHandler: ResizeHandler | null;
    constructor(props: PaneResizerStateProps, group: PaneGroupState);
    props: {
        readonly id: string;
        readonly role: "separator";
        readonly "data-direction": Direction;
        readonly "data-pane-group-id": string;
        readonly "data-active": "pointer" | "keyboard" | undefined;
        readonly "data-enabled": boolean;
        readonly "data-pane-resizer-id": string;
        readonly "data-pane-resizer": "";
        readonly tabIndex: number;
        readonly style: {
            readonly cursor: string;
            readonly touchAction: "none";
            readonly userSelect: "none";
            readonly "-webkit-user-select": "none";
            readonly "-webkit-touch-callout": "none";
        };
        readonly onkeydown: (e: KeyboardEvent) => void;
        readonly onblur: () => void;
        readonly onfocus: () => void;
        readonly onmousedown: (e: MouseEvent) => void;
        readonly onmouseup: () => void;
        readonly ontouchcancel: () => void;
        readonly ontouchend: () => void;
        readonly ontouchstart: (e: TouchEvent) => void;
    };
}
type PaneStateProps = WithRefProps<ReadableBoxedValues<{
    collapsedSize: number | undefined;
    collapsible: boolean | undefined;
    defaultSize: number | undefined;
    maxSize: number | undefined;
    minSize: number | undefined;
    order: number | undefined;
    onCollapse: PaneOnCollapse;
    onExpand: PaneOnExpand;
    onResize: PaneOnResize;
}>>;
declare class PaneState {
    #private;
    pane: {
        collapse: () => void;
        expand: () => void;
        getSize: () => number;
        isCollapsed: () => boolean;
        isExpanded: () => boolean;
        resize: (size: number) => void;
        getId: () => string;
    };
    constructor(props: PaneStateProps, group: PaneGroupState);
    props: {
        id: string;
        style: Record<string, unknown>;
        "data-pane": string;
        "data-pane-id": string;
        "data-pane-group-id": string;
        "data-collapsed": string | undefined;
        "data-expanded": string | undefined;
    };
}
export declare function usePaneGroup(props: PaneGroupStateProps): PaneGroupState;
export declare function usePaneResizer(props: PaneResizerStateProps): PaneResizerState;
export declare function usePane(props: PaneStateProps): PaneState;
export {};
